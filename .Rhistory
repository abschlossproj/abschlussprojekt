y_log <- glm( cbind(Y_g, N-Y_g) ~
major_eco + major_hum + major_ns + major_oss + sat +
language + mathcourse + physiccourse + chemistcourse,
family=binomial, data = data.frame(X_g))
summary(y_log)
log_m <- glm( cbind(Y_g, N-Y_g) ~
major_eco + major_hum + major_ns + major_oss + sat +
language + mathcourse + physiccourse + chemistcourse,
family=binomial(link="logit"), data = data.frame(X_g))
y_log_p = make.link("logit")$linkinv(predict(log_m, newdata = testset))
y_log_p = make.link("logit")$linkinv(predict(log_m, newdata = testingset))
odds <- predict(log_m, newdata = testingset)
log_m <- glm( cbind(Y_g, N-Y_g) ~
major_eco + major_hum + major_ns + major_oss + sat +
language + mathcourse + physiccourse + chemistcourse,
family=binomial(link="logit"), data = unique(trainingset))
[,-1]
log_m <- glm( cbind(Y_g, N-Y_g) ~
major_eco + major_hum + major_ns + major_oss + sat +
language + mathcourse + physiccourse + chemistcourse,
family=binomial(link="logit"), data = unique(trainingset[,-1]))
odds <- predict(log_m, newdata = testingset)
odds
y_log_p = make.link("logit")$linkinv(odds)
y_log_p
length(y_log_p)
length(odds)
nrow(testingset)
plot(y_log_p)
hist(y_log_p)
CE_log = CE(y_log_p)
vgl.CE <- ( CE_lda = CE(y_pred)
CE_qpa = CE(y_p_qda)
vgl.CE <- ( CE_lda = CE(y_pred),
vgl.CE <- ( "CE_lda" = CE(y_pred),
vgl.CE <- c( "CE_lda" = CE(y_pred),
"CE_qda" = CE(y_p_qda),
"CE_log" = CE(y_log_p))
vgl.CE
vgl.CE
?TukerHSD
?TukeyHSD
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
setwd("/home/matthias/Documents/Wien/Statistik/2020_SoSe/LineareMultivariateStatistik/HA/")
library(dplyr)
library(ggplot2)
library(ggcorrplot)
dietdata <- read.csv("DietData.csv")
colnames(dietdata)
dim(dietdata[,-1])
dim(unique(dietdata[,-1]))
#only unique, linear independent data
#data missing?
all(!is.na(dietdata)) #some missing, inspection shows gender for 1, and 2,
dietdata <- dietdata %>% mutate(weight.loss = pre.weight - weight6weeks)
dietdata$gender <-as.factor(dietdata$gender)
dietdata$Diet <- as.factor(dietdata$Diet)
dietdata <- dietdata[-c(1,2),] #truncate
attach(dietdata)
summary(weight.loss)
summary(weight.loss[gender==0])
summary(weight.loss[gender==1])
summary(weight.loss[Diet==1])
summary(weight.loss[Diet==2])
summary(weight.loss[Diet==3])
hist(as.numeric(gender)-1,freq=F,
breaks=c(-.5,0.5,1.5),labels=T,axes=F,ylim=c(0,0.6),
xlab="Gender 0 and 1") ##????
par(mfrow=c(1,3))
boxplot(dietdata[,"Age"],xlab="Age")
boxplot(dietdata[,c("Height")],xlab="Height")
boxplot(dietdata[,c("weight.loss")],xlab="Weight loss")
par(mfrow=c(1,1))
#looks more or less symmetrical -> normal?
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
hist_weight
head(studentdata)
library(captioner)
install.packages("captioner")
tinytex::reinstall_tinytex()
install.packages("captioner")d
library(captioner)
hist_weight
plot(hist_weight)
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
plot(hist_weight)
normal=rnorm( 50000,mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topright",c("weight.loss relative Häufigkeit",
"~N{mean(weight.loss), sd(weight.loss)}"),
col=c(1,5), lty=1)
#looks normal to me
ggplot(dietdata[-c(1,2),],aes(x=weight.loss)) +
theme_bw() +
facet_grid(gender~Diet) +
geom_density() +
labs(y="relative frequency",
title ="density per diet and gender")
groups=list(
gender.1_diet.1 = (weight.loss[which(gender==1 & Diet ==1)]),
gender.1_diet.2 = (weight.loss[which(gender==1 & Diet ==2)]),
gender.1_diet.3 = (weight.loss[which(gender==1 & Diet ==3)]),
gender.0_diet.1 = (weight.loss[which(gender==0 & Diet ==1)]),
gender.0_diet.2 = (weight.loss[which(gender==0 & Diet ==2)]),
gender.0_diet.3 = (weight.loss[which(gender==0 & Diet ==3)]))
#only 70 entries???
#if NAs not truncated, they somehow show up
alpha = 5/length(groups)
par(mfrow=c(2,3))
for (g in groups)
{
qqnorm(g); qqline(g)
print(paste("Shapiro-Wilk test's p-Value:", round(shapiro.test(g)$p.value,3)))
print(paste("emp. Standard deviation: ",  round(sd(g),3)))
}
par(mfrow=c(1,1))
knit_with_parameters('~/Documents/Wien/Statistik/2020_SoSe/LineareMultivariateStatistik/HA/MatthiasLang_LineareMultivariateStatistik2020.Rmd')
#exclude the dependent variable
testingset_p <- testingset[,-1]
#no transform
jitter=runif(nrow(testingset_p),min=-.15,max=.15)
ggplot(testingset) +
geom_point(
aes(x=mathcourse+physiccourse+chemistcourse+jitter,y=sat,color=sex),
alpha=.6)
#as boxplot #here better grouped and by coulor, no horizontal facetting
ggplot(testingset) + facet_grid(I(mathcourse+physiccourse+chemistcourse)~sex) + geom_boxplot(aes(x=mathcourse+physiccourse+chemistcourse,y=sat,color=sex),alpha=.6)
ggplot(testingset) + facet_grid(cols=vars(I(mathcourse+physiccourse+chemistcourse))) + geom_boxplot(aes(group=sex,y=sat,color=sex),alpha=.6)
#with transform
make_numeric <- function(tr)
{
m_eco = (as.numeric(tr$major_eco))
m_hum = (as.numeric(tr$major_hum))
m_ns  = (as.numeric(tr$major_ns ))
m_oss = (as.numeric(tr$major_oss))
m_sat = (tr$sat)
m_lan = (as.numeric(tr$language))
m_mat = ((tr$mathcourse))
m_phy = ((tr$physiccourse))
m_che = ((tr$chemistcourse))
mu <- data.frame("major_eco"=m_eco, "major_hum"=m_hum, "major_ns"=m_ns,
"major_oss"=m_oss, "sat"=m_sat,"language"= m_lan,
"mathcourse"=m_mat, "physiccourse"=m_phy, "chemistcourse"=m_che)
}
testingset_t = data.frame(
"transformedX" = (as.matrix(make_numeric(testingset_p)) %*% v) ,
"sex" = as.factor(testingset[,1]) )
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) )
detach(studentdata)
#with transform
make_numeric <- function(tr)
{
m_eco = (as.numeric(tr$major_eco))
m_hum = (as.numeric(tr$major_hum))
m_ns  = (as.numeric(tr$major_ns ))
m_oss = (as.numeric(tr$major_oss))
m_sat = (tr$sat)
m_lan = (as.numeric(tr$language))
m_mat = ((tr$mathcourse))
m_phy = ((tr$physiccourse))
m_che = ((tr$chemistcourse))
mu <- data.frame("major_eco"=m_eco, "major_hum"=m_hum, "major_ns"=m_ns,
"major_oss"=m_oss, "sat"=m_sat,"language"= m_lan,
"mathcourse"=m_mat, "physiccourse"=m_phy, "chemistcourse"=m_che)
}
testingset_t = data.frame(
"transformedX" = (as.matrix(make_numeric(testingset_p)) %*% v) ,
"sex" = as.factor(testingset[,1]) )
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) ) +
geom_vline( aes(yintercept= ( 0.5 * t(mu_m - mu_f) %*% S_w_1 %*% (mu_m + mu_f) )))
#with transform
make_numeric <- function(tr)
{
m_eco = (as.numeric(tr$major_eco))
m_hum = (as.numeric(tr$major_hum))
m_ns  = (as.numeric(tr$major_ns ))
m_oss = (as.numeric(tr$major_oss))
m_sat = (tr$sat)
m_lan = (as.numeric(tr$language))
m_mat = ((tr$mathcourse))
m_phy = ((tr$physiccourse))
m_che = ((tr$chemistcourse))
mu <- data.frame("major_eco"=m_eco, "major_hum"=m_hum, "major_ns"=m_ns,
"major_oss"=m_oss, "sat"=m_sat,"language"= m_lan,
"mathcourse"=m_mat, "physiccourse"=m_phy, "chemistcourse"=m_che)
}
testingset_t = data.frame(
"transformedX" = (as.matrix(make_numeric(testingset_p)) %*% v) ,
"sex" = as.factor(testingset[,1]) )
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) ) +
geom_vline( aes(xintercept= ( 0.5 * t(mu_m - mu_f) %*% S_w_1 %*% (mu_m + mu_f) )))
#with transform
make_numeric <- function(tr)
{
m_eco = (as.numeric(tr$major_eco))
m_hum = (as.numeric(tr$major_hum))
m_ns  = (as.numeric(tr$major_ns ))
m_oss = (as.numeric(tr$major_oss))
m_sat = (tr$sat)
m_lan = (as.numeric(tr$language))
m_mat = ((tr$mathcourse))
m_phy = ((tr$physiccourse))
m_che = ((tr$chemistcourse))
mu <- data.frame("major_eco"=m_eco, "major_hum"=m_hum, "major_ns"=m_ns,
"major_oss"=m_oss, "sat"=m_sat,"language"= m_lan,
"mathcourse"=m_mat, "physiccourse"=m_phy, "chemistcourse"=m_che)
}
testingset_t = data.frame(
"transformedX" = (as.matrix(make_numeric(testingset_p)) %*% v) ,
"sex" = as.factor(testingset[,1]) )
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) ) +
geom_hline( aes(yintercept= ( 0.5 * t(mu_m - mu_f) %*% S_w_1 %*% (mu_m + mu_f) )))
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) ) +
geom_hline( aes(yintercept=
( 0.5 * t(mu_m - mu_f) %*% S_w_1 %*% (mu_m + mu_f) ))) +
annotate( geom="text", x=0,y=0.006, label="decision boundary")
ggplot(testingset_t) +
geom_boxplot( aes(group=sex, y=transformedX, color=sex) ) +
geom_hline( aes(yintercept=
( 0.5 * t(mu_m - mu_f) %*% S_w_1 %*% (mu_m + mu_f) ))) +
annotate( geom="text", x=0.15,y=0.0055, label="decision boundary")
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
plot(hist_weight)
normal=rnorm( 50000,mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topright",c("weight.loss relative Häufigkeit",
"~N{mean(weight.loss), sd(weight.loss)}"),
col=c(1,5), lty=1)
#looks normal to me
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
plot(hist_weight)
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topright",c("weight.loss relative Häufigkeit",
"~N{mean(weight.loss), sd(weight.loss)}"),
col=c(1,5), lty=1)
#looks normal to me
normal
hist_weight <- hist(weight.loss,freq=T,ylim=c(0,0.2));
plot(hist_weight)
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
plot(hist_weight)
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
plot(hist_weight)
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topright",c("weight.loss relative Häufigkeit",
"~N{mean(weight.loss), sd(weight.loss)}"),
col=c(1,5), lty=1)
#looks normal to me
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topright",c("weight.loss relative Häufigkeit",
"~N{mean(weight.loss), sd(weight.loss)}"),
col=c(1,5), lty=1)
#looks normal to me
hist_weight <- hist(weight.loss,freq=F,ylim=c(0,0.2));
normal=rnorm( length(weight.loss),mean(weight.loss),sd(weight.loss));
lines( x=seq(-3,9,2),
y=hist(normal[-4<=normal & normal < 10] ,
plot=F, breaks=hist_weight$breaks)$density ,
col=5,type="b")
legend("topleft",c("weight.loss rel. frequ.",
"~N"),
col=c(1,5), lty=1)
#looks normal to me
View(cars)
View(mtcars)
?read_delim
library(dplyr)
?read_delim
??read_delim
?read.xlsx
install.packages('openxlsx')
#puts out errors: log10 divided by 0, removing missing values
print('-'*80)
#puts out errors: log10 divided by 0, removing missing values
print('----------------------------------------')
print('Start at:', starttime)
#print('Start at:', starttime)
#print('Fin.  at:', datetime.datetime.now())
print('Graphics are saved in folder %s' %graphics)
library(ggplot)
library(readr)
library(dplyr)
graphics = "graphics/"
#puts out errors: log10 divided by 0, removing missing values
print('----------------------------------------')
#print('Start at:', starttime)
#print('Start at:', starttime)
#print('Fin.  at:', datetime.datetime.now())
print(paste('Graphics are saved in folder', graphics)
#puts out errors: log10 divided by 0, removing missing values
print('----------------------------------------')
#puts out errors: log10 divided by 0, removing missing values
print('----------------------------------------')
#print('Start at:', starttime)
#print('Fin.  at:', datetime.datetime.now())
print(paste('Graphics are saved in folder', graphics))
print("Done")
getwd()
log10 <- function(x){
if (x>10) {log10=x
}else if (x>0) {log10=11
}else {log10=10 }}
log10(10)
log10
log10 <- function(x){
if (x>10)      {x
}else if (x>0) {11
}else          {10 }}
log10(1)
log10(10)
log10(0)
log10(40)
library(ggplot)
library(readr)
library(dplyr)
WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt/"
setwd(WorkingDirectory)
graphics = "graphics/"
file.path(WorkingDirektory,'documentation_tables')
file.path(WorkingDirectory,'documentation_tables')
WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt"
files = list.files(file.path(WorkingDirectory,'documentation_tables')) #lists all csv generated in simul script
files
for x in files{ print(x)}
for (x in files){ print(x)}
?DataFrame
?dataframe
x
'test'[1]
'test'[2]
'test'[[1]]
df = read_delim(file.path(WorkingDirectory,'documentation_tables' , x), delim=',')
df
int(2.0)
integer(2.0)
integer(2.0)
integer(2.3)
int(2.1)
as.integer(2.1)
library(stringr)
str_sub(x, 21, 3)
str_sub(x, 21, 23)
str_sub(x, 22, 23)
df = df %>% mutate(
'k' = as.integer(str_sub(x, 22,23)
'm' = as.integer(str_sub(x, 26,27)
'p' = as.integer(str_sub(x, 30,31)
)
df
as.integer(str_sub(x, 22,23)
)
df = df %>% mutate(
'k' = as.integer(str_sub(x, 22,23)),
'm' = as.integer(str_sub(x, 26,27)),
'p' = as.integer(str_sub(x, 30,31)),
)
df
?bind_rows
'
This script loads the .csv files from documentation_tables/, combines them into a single dataframe.
Some graphics are then generated to compare the scenarios and different interesting developments.
To that end, some more rows are generated out of the existing ones.
As scenarios the difference between k and p seems most interesting, so m is fixed mostly at 5.
One scenario is randomly chosen to illustrate further
The graphics are saved to graphics/
'
library(ggplot)
library(readr)
library(dplyr)
library(stringr)
WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt"
setwd(WorkingDirectory)
graphics = "graphics/"
# prepare a number for log_10, so that we don't get 'ugly' values under 1
log10 <- function(x){
if (x>10)      {x
}else if (x>0) {11
}else          {10 }}
#print('Expected runtime: XXmin')
print('-------------------------------------------------------')
print('graphics are being generated... Do not press any key...')
print('-------------------------------------------------------')
files = list.files(file.path(WorkingDirectory,'documentation_tables')) #lists all csv generated in simul script
# combine all the tables into one dataframe 'docs'
#i=1
for (x in files) {
df = read_delim(file.path(WorkingDirectory,'documentation_tables' , x), delim=',')
#slice the parameters of the scenario from the filename
df = df %>% mutate(
'k' = as.integer(str_sub(x, 22,23)),
'm' = as.integer(str_sub(x, 26,27)),
'p' = as.integer(str_sub(x, 30,31)),
)
docs = bind_rows(docs, df)
}
docs
?DataFrame
?dataframe
# combine all the tables into one dataframe 'docs'
docs= data.frame()
for (x in files) {
df = read_delim(file.path(WorkingDirectory,'documentation_tables' , x), delim=',')
#slice the parameters of the scenario from the filename
df = df %>% mutate(
'k' = as.integer(str_sub(x, 22,23)),
'm' = as.integer(str_sub(x, 26,27)),
'p' = as.integer(str_sub(x, 30,31)),
)
docs = bind_rows(docs, df)
}
warnings()
docs
View(docs)
docs['days']
t = max(docs['days'])
t
list(docs['days'])
type(docs['days'])
typeof(docs['days'])
list(c(1,2,3))
typeof(list(c(1,2,3)))
max(list(c(1,2,3)))
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine")
WorkingDirectory
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine\n")
WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt"}
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine\n")
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine\n")
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine\n")
paste('Working directory: ', WorkingDirectory)
str_length(WorkingDirectory) <5
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine\n")
d
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine: ")
if (str_length(WorkingDirectory) <5) {WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt"}
paste('Working directory: ', WorkingDirectory)
WorkingDirectory <- readline(prompt="Enter the working directory or press [Enter] if your on matthias's machine: ")
if (str_length(WorkingDirectory) <5) {WorkingDirectory <- "/home/matthias/Documents/Wien/Statistik/2020_SoSe/CompStat_SS20/alt_und_meins/meins/UE4/abschlussprojekt"}
paste('Working directory: ', WorkingDirectory)
graphics = file.path(WorkingDirectory,"graphics/")
graphics
docs[docs['m']==5]
docs['m']==5
docs[docs['m']==5,]
#################################################################
file = files[25] #arbitrarely chosen scenario with a nice development
file
################################################################
doc = read_delim(file.path(WorkingDirectory,'documentation_tables', file), delim=',')
doc
string(12)
tostring(12)
toString(12)
toString(docm05['k'])
# Some nice simulations are chosen:
docm05 = docs[docs['m']==5,]
docm05['k']
toString(docm05['k'])
docm05_cp = docm05
docm05_cp['k'] = toString(docm05['k'])
docm05_cp['p'] = toString(docm05['p'])
docm05_cp
docm05_cp = docm05
docm05_cp
docm05_cp = docm05
docm05_cp <- mutate(docm05_cp, 'k' = toString('k'), 'p'= toString('p'))
docm05_cp
glimpse(docm05)
glimpse(docm05_cp)
[]
list(1,2)
list(c(1,2))
1\
